#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# Retrieve arguments
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

script_dir=$PWD

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
#Â Save app settings
#=================================================

ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app is_public $is_public

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
port=$(ynh_find_port 8096)
# Open this port
yunohost firewall allow --no-upnp TCP $port 2>&1
ynh_app_setting_set $app port $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies build-essential cpanminus
echo yes | sudo cpanm Carton

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# Install lufi via carton
#=================================================

pushd $final_path
carton install 2>&1
popd

#=================================================
# Configure owner
#=================================================

sudo chown -R $app:$app $final_path




# Copy it to Nginx conf directory
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

if [ "$is_public" = "Yes" ];
then
	sudo sed -i "s@#--PRIVATE--@@g" /etc/nginx/conf.d/$domain.d/$app.conf
fi

## Copy and fix variable into lufi config
sudo cp ../conf/lufi.conf.template "${final_path}/lufi.conf"
sudo sed -i "s@__DOMAIN__@$domain@g" "${final_path}/lufi.conf"
sudo sed -i "s@__PATH__@$path@g" "${final_path}/lufi.conf"
sudo sed -i "s@__PORT__@$port@g" "${final_path}/lufi.conf"

secret=$(ynh_string_random 24)
CHECK_VAR "$secret" "secret empty"
sudo sed -i "s@__SECRET__@$secret@g" "${final_path}/lufi.conf"
STORE_MD5_CONFIG "lufi.conf" "${final_path}/lufi.conf"

# Install systemd script
sudo cp ../conf/lufi.service /etc/systemd/system/lufi.service
sudo chown root: /etc/systemd/system/lufi.service
sudo sed -i "s@__FINALPATH__@$final_path/@g" /etc/systemd/system/lufi.service
## Start service auto
sudo systemctl enable lufi.service

## Install cron
sudo cp ../conf/cron_lufi /etc/cron.d/$app
sudo sed -i "s@__FINALPATH__@$final_path/@g" /etc/cron.d/$app
sudo chmod +x $final_path/script/lufi

# Install logrotate
sed -i "s@__FINALPATH__@$final_path@g" ../conf/logrotate
sudo cp ../conf/logrotate /etc/logrotate.d/$app




# Change variables in nginx configuration
sudo sed -i "s@__PATH__@$path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__PORT__@$port@g" /etc/nginx/conf.d/$domain.d/$app.conf

# Make app public or private
ynh_app_setting_set $app skipped_uris "/"
if [ "$is_public" = "No" ];
then
	if [ "$path" == "/" ]; then
	    path=""
	fi
	ynh_app_setting_set $app protected_regex "$domain_regex$path/stats$","$domain_regex$path/manifest.webapp$","$domain_regex$path/$","$domain_regex$path/d/.*$","$domain_regex$path/m/.*$"
fi

# Making log symbolic link to /var/log
sudo touch /var/log/$app/production.log
sudo chown www-data: /var/log/$app/production.log
sudo ln -s /var/log/$app/production.log "$final_path/log/production.log"



# Start lufi
sudo systemctl daemon-reload
sudo systemctl start lufi.service
sudo systemctl enable lufi.service

# Set right permissions on new files created at first start
sudo chown -R www-data: "$final_path"

# Add lufi as a service
sudo yunohost service add lufi -l $final_path/log/production.log

if [ "$is_public" = "No" ];
then
	# Delete public access
	ynh_app_setting_delete $app unprotected_uris
	sudo yunohost app ssowatconf
fi

# Reload Nginx
sudo service nginx reload
